module adder4 (
    input  logic [3:0] a,
    input  logic [3:0] b,
    input  logic       cin,
    output logic [3:0] sum,
    output logic       cout
);
  
  logic [3:0] xo;
  logic [2:0] carry;
  
  assign xo0 = b[0] ^ cin;
  assign xo1 = b[1] ^ cin;
  assign xo2 = b[2] ^ cin;
  assign xo3 = b[3] ^ cin;
  
  full_adder fa0(.a(a[0]), .b(xo[0]), .cin(cin), .sum(sum[0]), .cout(carry[0]));
  full_adder fa1(.a(a[1]), .b(xo[1]), .cin(cin), .sum(sum[1]), .cout(carry[1]));
  full_adder fa2(.a(a[2]), .b(xo[2]), .cin(cin), .sum(sum[2]), .cout(carry[2]));
  full_adder fa3(.a(a[3]), .b(xo[3]), .cin(cin), .sum(sum[3]), .cout(cout)); 
              

// 1-bit Full Adder Module Used Above
module full_adder (
    input  logic a,
    input  logic b,
    input  logic cin,
    output logic sum,
    output logic cout
);
    assign sum  = a ^ b ^ cin;
    assign cout = (a & b) | (b & cin) | (a & cin);
endmodule
